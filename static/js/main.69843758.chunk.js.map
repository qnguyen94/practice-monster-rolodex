{"version":3,"sources":["components/card-list/card.component.jsx","components/card-list/card-list.component.jsx","components/card-list/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","catch","reject","console","log","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAGaA,G,YAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACxB,6BAAKL,EAAMI,QAAQE,OACnB,6BAAKN,EAAMI,QAAQG,aCJhBC,G,MAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLlBM,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OAAO,uBACHZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCqDHG,E,kDAvDb,aAAc,IAAD,8BACX,gBA2BFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SA1BrC,EAAKC,MAAQ,CACXb,SAAS,GACTU,YAAa,IALJ,E,gEAaO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAC3BT,SAAUkB,OAEXC,OAAM,SAAAC,GAAM,OAAIC,QAAQC,IAAIF,Q,+BAavB,MAG4BG,KAAKV,MAA/Bb,EAHF,EAGEA,SAAUU,EAHZ,EAGYA,YAGZc,EAAmBxB,EAASyB,QAAO,SAAA9B,GAAO,OAC9CA,EAAQE,KAAK6B,cAAcC,SAASjB,EAAYgB,kBAGlD,OACE,sBAAKlC,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAgBmB,KAAKnB,eAEvB,cAAC,EAAD,CAAUJ,SAAUwB,W,GAlDVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.69843758.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\nexport const Card = (props) => {\r\n    return(\r\n        <div className='card-container'>\r\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=280x280`}/>\r\n          <h1>{props.monster.name}</h1>\r\n          <h2>{props.monster.email}</h2>\r\n        </div> \r\n    )\r\n}","import React from 'react';\r\nimport { Card } from './card.component'\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = (props) => {\r\n    return(\r\n        <div className='card-list'>\r\n          {props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster} />\r\n          ))}\r\n        </div> \r\n\r\n    )\r\n}\r\n   \r\n","import React from 'react';\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => {\r\n    return(<input\r\n        className='search'\r\n        type='search' \r\n        placeholder={placeholder}\r\n        onChange={handleChange} />\r\n    )\r\n}","import React ,{ Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/card-list/search-box.component';\n\nclass App extends Component{\n  constructor(){\n    super(); // Call initialization from Component\n\n    this.state = {\n      monsters:[],\n      searchField: '',\n    }\n\n    //Bind custom methods to this component (ES5)\n    //ES6: Use arrow functions => Automatically bind, don't need below\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({\n      monsters: users\n    }))\n    .catch(reject => console.log(reject))\n  }\n\n  // // ES5 (need binding)\n  // handleChange(e){\n  //   this.setState({searchField: e.target.value})\n  // }\n\n  //ES6 (Don't need binding)\n  handleChange = e => {\n    this.setState({searchField: e.target.value})\n  }\n\n  render(){\n\n    //Destructure into 2 variables\n    const { monsters, searchField } = this.state;\n\n    //Filter out matched monsters\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n\n    return(\n      <div className=\"App\">\n        <h1> Monster Rolodex </h1>\n        <SearchBox \n          placeholder='Search Monsters'\n          handleChange = {this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}